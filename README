PARTIE TYPAGE D'UNE EXPRESSION

--Exercice 1--

Cet exercice ne m'a pas posé de problèmes particuliers.

--Exercice 2--

Pour l'ajout de la gestion des appels de fonctions, j'ai cependant rencontré quelques problèmes. Je ne savais pas vraiment comment m'y prendre pour évaluer la liste des variables de l'appel de fonction. J'ai enfin réussi avec l'utilisation de List.map.

--Exercice 3--

Aucune difficulté.

J'ai choisi de multiplier le nombre de fonction que j'utilise plutôt que de tout concentrer en 3 fonctions. Cependant avec cela j'ai totalement oublié d'utiliser les fonctions d'aide fournies par Lang. Pour gérer les cas d'erreur j'ai créé differentes exceptions.

PARTIE GENERATION DE CODE BYTECODE

--Exercice 4--

Pour cet exercice, le plus dur a été de bien comprendre ce qui était demandé.Pour renvoyer du bytecode lisible par Jasmin avec la fonction pr_instr, il fallait cependant modifier légérement le MAKEFILE pour charger le fichier print_instr avant gen qui utilise la fonction pr_instr. De même, pourl le use, il fallait faire la même opération c'est à dire placer print_instr avant gen dans le chargement des fichiers.

LES TESTS

Pour realiser les tests j'ai tout d'abbord vérifié avec les exemples donnés durant le projet.

Soit env1 l'environnement utilisé pour les tests et exp les expressions testées :

let env1 = {localvar = [("k", IntT ); ("n", IntT )]; globalvar = [];
returntp = VoidT; funbind = [Fundecl(IntT , "f", [Vardecl(IntT , "n"); Vardecl(BoolT , "b")])]};;

let exp1 = BinOp (0, BCompar BCeq , VarE (0, Var (Local , "n")),
BinOp (0, BArith BAadd , VarE (0, Var (Local , "k")),
Const (0, IntV 1)));;

Avec cette première expression le typage de tp_expr est réalisé avec succès. On obtient donc 
BinOp (BoolT, BCompar BCeq, VarE (IntT, Var (Local, "n")),
 BinOp (IntT, BArith BAadd, VarE (IntT, Var (Local, "k")),
  Const (IntT, IntV 1)))

Je teste ensuite pour un cas plus pour vérifier les erreurs de typage :

let exp5 = BinOp (0, BCompar BCeq , VarE (0, Var (Local , "n")),
BinOp (0, BArith BAadd , Const (0, BoolV true),
Const (0, IntV 1)));;

On obtient bien sûr Exception: Typing.BadType.
Cette dernière est levée car additionner une constante avec un booleen est impossible.

Pour l'ajout de la gestion des appels de fonctions j'ai choisi d'utiliser tout d'abbord un cas simple :

let exp7 = CallE (0, "f", [Const (0, IntV 3); Const (0, BoolV true )]);;

Cette dernière ayant bien étée déclarée préalablement dans l'environnement on obtient bien le typage IntT.

Si on tente avec une fonction non déclarée :
let exp8 = CallE (0, "l", [Const (0, IntV 3); Const (0, BoolV true )]);;
On obtient Exception: Typing.FunNotDefined. En effet cette dernière n'a pu être trouvé dans l'environnement.

Enfin un cas un autre cas pour tester le typage : 
let exp10 = BinOp (0, BArith BAadd , VarE (0, Var (Local , "k")),
CallE (0, "f", [Const (0, IntV 3); Const (0, BoolV true )]));;

On obtient bien 
BinOp (IntT, BArith BAadd, VarE (IntT, Var (Local, "k")),
 CallE (IntT, "f", [Const (IntT, IntV 3); Const (BoolT, BoolV true)]))

Enfin les tests pour la génération du bytecode :

On type l'expression let exp12 =
BinOp (0, BArith BAadd , VarE (0, Var (Local , "k")), Const(0, IntV 3));; 
 puis on génère son bytecode avec la fonction gen_exp :
On considère que le tableau de variables donné vaut ["k"] :

["iload 0"; "sipush 3"; "iadd"]

Si on cherche à evaluer une expression contenant des branchements comme exp1 :
On obtient bien l'exception Exception: Gen.NotSuported.

Enfin si on essaye de générer le code avec le mauvais tableau de variable :
Si ce dernier vaut ["p"] avec exp12 on obtient :
 
Exception: Gen.NotFound.

Si on tente avec l'exemple du projet c'est à dire avec 
let exp13 =
BinOp (0, BArith BAsub , VarE (0, Var (Local , "x")), BinOp (0, BArith BAadd , VarE (0, Var (Local , "y")), Const(0, IntV 2)));;

et l'environnement approprié comme 
let env1 = {localvar = [("x", IntT ); ("y", IntT )]; globalvar = [];
returntp = VoidT; funbind = [Fundecl(IntT , "f", [Vardecl(IntT , "n"); Vardecl(BoolT , "b")])]};;

On obtient bien ["iload 0"; "iload 1"; "sipush 2"; "iadd"; "isub"]

FIN PARTIE TYPAGE 

--Exercice 6--
Ici la principale difficulté étaient de bien cibler le but de chaque instructions afin de bien réaliser la fonction. Une fois ce cap passé la fonction à pu être réalisé facilement.

--Exercice 7--
Ici, pour pour l'évaluation d'une définition de fonction j'ai choisi encore une fois de déléguer plusieurs actions plus basiques à des fonctions auxilliaires. De ce fait, l'ajout des différentes données dans l'environnement et géré extérieurement et la fonction principale devient plus claire. 

--Exercice 8--
Cette fonction ne m'a pas posé particulièrement de problèmes et à pu être réalisée assez rapidement.

FIN PARTIE GENERATION BYTECODE

--Exercice 9--
La principale difficulté de cette partie a été e travail préalable à fournir en amont de la complétion de la fonction. En effet, il fallait tout d'abbord bien comprendre comment gérer les étiquettes et voir comment les implémenter dans la fonction. Ensuite, il fallait bien distinguer les différents cas à branchements pour adapter l'apparition des étiquettes dans la génération du pseudo bytecode. De plus, il fallait bien comprendre comment fonctionnaient les appels de fonctions. J'ai eu plusieurs problèmes pour intégrer les labels dans la fonction. J'ai tout d'abbord choisi d'implémenter la première méthode proposé dans le sujet du projet. Cependant je restait bloqué au niveau des appels de fonctions. J'ai à ce moment appris l'existence des pointeurs explicites de caml permettant de stocker la dernière valeur utilisable pour la génération de la prochaine étiquette. Une fois son fonctionnement compris j'ai donc pu réaliser une petite fonction permettant d'incrémenteur ce pointeur compteur et de renvoyer cette valeur son forme valide. Ceci fait, la génération de labels a étée rendue très facile.

--Exercice 10--
Cette fonction n'a pas posé de problèmes particuliers. J'ai aussi utilisé le pointeur explicite pour les labels.

--Exercice 11--
Ici, la difficulté était de savoir quoi renvoyer. Une fois avoir consulté le fichier instrs, j'ai pu réaliser la fonction.

PARTIE ANALYSE

--Exercice 12--
Cette fonction n'a pas posé de problèmes particuliers.

--Exercice 13--
La difficulté ici était de bien comprendre comment compter les éléments pour que la taille de la pile d'instructions soit plus ou moins optimale.

--Exercice 14--
Pas de problèmes particulier.

POINTS FORTS DU COMPILATEUR

Je ne pense pas que le compilateur ai de véritables points forts si ce n'est de fonctionner. 

POINTS FAIBLES DU COMPILATEUR

Les exceptions ne sont pas encore assez précises pour clairement identifier le problème. 
La gestion des piles n'est surement pas assez optimisée.

TESTS

Pour les tests j'ai choisi de tout simplement inclure dans le test différentes fonctions basiques servant à tester si les instructions fonctionnent de l'assignation de variables aux instructions à branchement et enfin aux appels de fonctions. 

En resultat du Wrapper on a : 

Addition de deux entiers 5 et 10 : 
resultat de la fonction addition: 15
Addition de deux entiers 5 et -10 : 
Resultat de la fonction addition: -5
Est-ce que 2 = 3 ?
C'est faux.
Resultat de la fonction zero sur 50: 0
Resultat de la fonction zero sur -50: 0
Resultat de la fonction increment de 2: 3
Resultat de la fonction isNatural de 2: 
il est bien naturel.

Si par mégarde une fonction n'est pas bien typée on obtient bien une exception : Fatal error: exception Typing.TypingError ...

